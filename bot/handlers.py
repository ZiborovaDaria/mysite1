from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from django.conf import settings
from asgiref.sync import sync_to_async
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from bot.keyboards import back_to_faq_keyboard, faq_keyboard, feedback_actions_keyboard
from bot.keyboards import main_kb, feedback_type_kb, cancel_kb, store_city_kb, stores_kb, products_kb, admin_kb

class FeedbackStates(StatesGroup):
    choosing_type = State()
    choosing_city = State()
    choosing_store = State()
    entering_product_name = State()
    choosing_product = State()
    choosing_rating = State()
    writing_text = State()
    forwarding_to_operator = State()

class AdminStates(StatesGroup):
    viewing_feedbacks = State()
    replying_to_feedback = State()

async def cmd_start(message: types.Message):
    await message.answer(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è –ï–ú–ï–•-–∞–≤—Ç–æ!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.",
        reply_markup=main_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ
async def cmd_faq(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        reply_markup=faq_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å FAQ
async def show_faq_answer(callback: types.CallbackQuery):
    question_id = callback.data.split("_")[1]
    answers = {
        "1": "üîπ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:\n1. –ù–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n2. –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (123) 456-7890\n3. –í –ª—é–±–æ–º –∏–∑ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤",
        "2": "üîπ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?\n\n–ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å:\n1. –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ (–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ')\n2. –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (123) 456-7890\n3. –ß–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞",
        "3": "üîπ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç?\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞:\n1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –∏ —É–ø–∞–∫–æ–≤–∫—É\n2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä\n3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç\n–°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è - 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è",
        "4": "üîπ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏?\n\n–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞:\n- –ú–æ—Å–∫–≤–∞: 1-2 –¥–Ω—è\n- –†–µ–≥–∏–æ–Ω—ã: 3-5 –¥–Ω–µ–π\n–°–∞–º–æ–≤—ã–≤–æ–∑ - –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞",
        "5": "üîπ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä?\n\n–ì–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å—Ä–æ–∫ –æ—Ç 6 –¥–æ 36 –º–µ—Å—è—Ü–µ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞."
    }
    
    await callback.message.edit_text(
        answers.get(question_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è"),
        reply_markup=back_to_faq_keyboard()
    )

# –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
async def back_to_faq(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        reply_markup=faq_keyboard()
    )

async def cmd_contacts(message: types.Message):
    contact_info = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-7890\n"
        "Email: info@emex-auto.ru\n"
        "–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π, 15\n\n"
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω-–ü—Ç: 9:00 - 20:00\n"
        "–°–±-–í—Å: 10:00 - 18:00"
    )
    await message.answer(contact_info)

async def start_feedback(message: types.Message, state: FSMContext):
    await state.set_state(FeedbackStates.choosing_type)
    await message.answer(
        "–û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?",
        reply_markup=feedback_type_kb()
    )

async def process_feedback_type(message: types.Message, state: FSMContext):
    if message.text not in ["–û –º–∞–≥–∞–∑–∏–Ω–µ", "–û —Ç–æ–≤–∞—Ä–µ"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–∑—ã–≤–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        return

    feedback_type = "shop" if message.text == "–û –º–∞–≥–∞–∑–∏–Ω–µ" else "product"
    await state.update_data(feedback_type=feedback_type)
    
    if feedback_type == "shop":
        await state.set_state(FeedbackStates.choosing_city)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=await store_city_kb())
    else:
        await state.set_state(FeedbackStates.entering_product_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=cancel_kb())

async def process_city(message: types.Message, state: FSMContext):
    from main.models import Store
    
    city_code = None
    city_choices = await sync_to_async(list)(Store.CITY_CHOICES)
    for code, name in city_choices:
        if name == message.text:
            city_code = code
            break
    
    if not city_code:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞")
        return
        
    await state.update_data(city=city_code)
    await state.set_state(FeedbackStates.choosing_store)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", 
        reply_markup=await stores_kb(city_code)
    )

async def process_store(message: types.Message, state: FSMContext):
    from main.models import Store
    
    data = await state.get_data()
    city_code = data['city']
    
    store = await sync_to_async(Store.objects.get)(city=city_code, address=message.text)
    await state.update_data(store_id=store.id)
    
    await state.set_state(FeedbackStates.choosing_rating)
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –æ—Ç 1 –¥–æ 5:", reply_markup=cancel_kb())

async def process_product_name(message: types.Message, state: FSMContext):
    from goods.models import Products
    
    query = message.text
    products = await sync_to_async(list)(Products.objects.filter(name__icontains=query)[:5])
    
    if not products:
        await message.answer("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:")
        return
        
    await state.update_data(product_query=query)
    await state.set_state(FeedbackStates.choosing_product)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", 
        reply_markup=products_kb(products)
    )

async def process_product_choice(message: types.Message, state: FSMContext):
    from goods.models import Products
    
    data = await state.get_data()
    product_name = message.text
    
    product = await sync_to_async(Products.objects.get)(name=product_name)
    await state.update_data(product_id=product.id)
    
    await state.set_state(FeedbackStates.choosing_rating)
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Ç–æ–≤–∞—Ä –æ—Ç 1 –¥–æ 5:", reply_markup=cancel_kb())

async def process_rating(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not 1 <= int(message.text) <= 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
        return

    await state.update_data(rating=int(message.text))
    await state.set_state(FeedbackStates.writing_text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", reply_markup=cancel_kb())

async def process_feedback_text(message: types.Message, state: FSMContext, bot):
    from bot.services import save_feedback_to_db, notify_operator
    
    data = await state.get_data()
    
    feedback_data = {
        'telegram_user_id': message.from_user.id,
        'username': message.from_user.full_name,
        'feedback_type': data.get('feedback_type'),
        'rating': data.get('rating'),
        'text': message.text,
        'store_id': data.get('store_id'),
        'product_id': data.get('product_id'),
    }
    
    feedback = await save_feedback_to_db(feedback_data)
    
    await message.answer(
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –µ–≥–æ –≤ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=main_kb()
    )
    
    await notify_operator(feedback, bot)
    await state.clear()

async def forward_to_operator(message: types.Message, state: FSMContext):
    await state.set_state(FeedbackStates.forwarding_to_operator)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=cancel_kb()
    )

async def process_operator_message(message: types.Message, state: FSMContext, bot):
    from bot.services import save_operator_request
    
    request = await save_operator_request(
        message.from_user.id,
        message.from_user.full_name,
        message.text
    )
    
    await bot.send_message(
        chat_id=settings.TELEGRAM_OPERATOR_CHAT_ID,
        text=f"‚úâÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (@{message.from_user.username}):\n\n{message.text}"
    )
    
    await message.answer(
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
        reply_markup=main_kb()
    )
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def admin_view_feedbacks(message: types.Message, state: FSMContext):
    from bot.services import get_pending_feedbacks
    
    feedbacks = await get_pending_feedbacks()
    
    if not feedbacks:
        await message.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=admin_kb())
        return
    
    await state.set_state(AdminStates.viewing_feedbacks)
    await state.update_data(feedbacks=feedbacks, current_index=0)
    await show_feedback(message, state)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
async def show_feedback(message: types.Message, state: FSMContext):
    data = await state.get_data()
    feedbacks = data['feedbacks']
    current_index = data['current_index']
    
    if current_index >= len(feedbacks):
        await message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=admin_kb())
        await state.clear()
        return
    
    feedback = feedbacks[current_index]
    feedback_text = await format_feedback(feedback)
    
    await message.answer(
        feedback_text,
        reply_markup=feedback_actions_keyboard(feedback.id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
async def admin_reply_to_feedback(callback: types.CallbackQuery, state: FSMContext):
    feedback_id = int(callback.data.split("_")[1])
    await state.set_state(AdminStates.replying_to_feedback)
    await state.update_data(feedback_id=feedback_id)
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def process_admin_reply(message: types.Message, state: FSMContext, bot):
    from bot.services import save_admin_reply, get_feedback_by_id
    
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
        return
    
    data = await state.get_data()
    feedback_id = data['feedback_id']
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        feedback = await save_admin_reply(feedback_id, message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=feedback.telegram_user_id,
            text=f"üì© –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à –æ—Ç–∑—ã–≤:\n\n{message.text}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer(
            "‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            reply_markup=admin_kb()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ—Ç–∑—ã–≤—É
        feedbacks = data.get('feedbacks', [])
        current_index = data.get('current_index', 0) + 1
        
        if current_index < len(feedbacks):
            await state.update_data(current_index=current_index)
            await show_feedback(message, state)
        else:
            await message.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=admin_kb())
            await state.clear()
            
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
            reply_markup=admin_kb()
        )
        await state.clear()

async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
        
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb())

async def format_feedback(feedback):
    feedback_type = "–º–∞–≥–∞–∑–∏–Ω" if feedback.feedback_type == "shop" else "—Ç–æ–≤–∞—Ä"
    target = ""
    
    if feedback.feedback_type == "shop" and feedback.store:
        target = f"üìç –ú–∞–≥–∞–∑–∏–Ω: {feedback.store.address}\n"
    elif feedback.feedback_type == "product" and feedback.product:
        target = f"üõí –¢–æ–≤–∞—Ä: {feedback.product.name}\n"
    
    return (
        f"üìù –û—Ç–∑—ã–≤ –æ {feedback_type}\n\n"
        f"{target}"
        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {feedback.rating}/5\n"
        f"üìÖ –î–∞—Ç–∞: {feedback.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {feedback.username} (ID: {feedback.telegram_user_id})\n\n"
        f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:\n{feedback.text}"
    )